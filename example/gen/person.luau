--!strict
--!nolint LocalUnused
--# selene: allow(empty_if, if_same_then_else, manual_table_clone, unused_variable)
-- This file was @autogenerated by protoc-gen-luau
local proto = require("./proto")
local _google_protobuf_timestamp = require("./google/protobuf/timestamp")

local Person: proto.Message<Person>
export type Person = {
	given_name: string,
	family_name: string,
	email: { string },
	birth_date: Date?,
	update_time: _google_protobuf_timestamp.Timestamp?,
}

local Date: proto.Message<Date>
export type Date = {
	year: number,
	month: number,
	day: number,
}

Person = {
	new = function()
		return {
			given_name = "",
			family_name = "",
			email = {},
			birth_date = nil,
			update_time = nil,
		}
	end,

	encode = function(self: Person): buffer
		local output = buffer.create(0)
		local cursor = 0

		if self.given_name ~= "" then
			output, cursor = proto.writeTag(output, cursor, 1, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeString(output, cursor, self.given_name)
		end

		if self.family_name ~= "" then
			output, cursor = proto.writeTag(output, cursor, 2, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeString(output, cursor, self.family_name)
		end

		if #self.email > 0 then
			for _, value: string in self.email do
				output, cursor = proto.writeTag(output, cursor, 3, proto.wireTypes.lengthDelimited)
				output, cursor = proto.writeString(output, cursor, value)
			end
		end

		if self.birth_date ~= nil then
			local encoded = Date.encode(self.birth_date)
			output, cursor = proto.writeTag(output, cursor, 4, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeBuffer(output, cursor, encoded, buffer.len(encoded))
		end

		if self.update_time ~= nil then
			local encoded = _google_protobuf_timestamp.Timestamp.encode(self.update_time)
			output, cursor = proto.writeTag(output, cursor, 5, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeBuffer(output, cursor, encoded, buffer.len(encoded))
		end

		local shrunkBuffer = buffer.create(cursor)
		buffer.copy(shrunkBuffer, 0, output, 0, cursor)
		return shrunkBuffer
	end,

	decode = function(input: buffer): Person
		local self = Person.new()
		local cursor = 0

		while cursor < buffer.len(input) do
			local field, wireType
			field, wireType, cursor = proto.readTag(input, cursor)

			if wireType == proto.wireTypes.varint then
				-- No fields
			elseif wireType == proto.wireTypes.lengthDelimited then
				if field == 1 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.given_name = buffer.tostring(value)
				elseif field == 2 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.family_name = buffer.tostring(value)
				elseif field == 3 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					table.insert(self.email, buffer.tostring(value))
				elseif field == 4 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.birth_date = Date.decode(value)
				elseif field == 5 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.update_time = _google_protobuf_timestamp.Timestamp.decode(value)
				end
			elseif wireType == proto.wireTypes.i32 then
				-- No fields
			elseif wireType == proto.wireTypes.i64 then
				-- No fields
			else
				error("Unsupported wire type: " .. wireType)
			end
		end

		return self
	end,

	jsonEncode = function(self: Person): any
		local output: {
			givenName: string?,
			familyName: string?,
			email: { string }?,
			birthDate: Date?,
			updateTime: _google_protobuf_timestamp.Timestamp?,
		} =
			{}

		if self.given_name ~= "" then
			output.givenName = self.given_name
		end

		if self.family_name ~= "" then
			output.familyName = self.family_name
		end

		if #self.email > 0 then
			local newOutput: { string } = {}
			for _, value: string in self.email do
				table.insert(newOutput, value)
			end
			output.email = newOutput
		end

		if self.birth_date ~= nil then
			output.birthDate = Date.jsonEncode(self.birth_date)
		end

		if self.update_time ~= nil then
			output.updateTime = _google_protobuf_timestamp.Timestamp.jsonEncode(self.update_time)
		end

		return output
	end,

	jsonDecode = function(input: { [string]: any }): Person
		local self = Person.new()

		if input.given_name ~= nil then
			self.given_name = input.given_name
		end

		if input.givenName ~= nil then
			self.given_name = input.givenName
		end

		if input.family_name ~= nil then
			self.family_name = input.family_name
		end

		if input.familyName ~= nil then
			self.family_name = input.familyName
		end

		if input.email ~= nil then
			local newOutput: { string } = {}
			for _, value: string in input.email do
				table.insert(newOutput, value)
			end

			self.email = newOutput
		end

		if input.birth_date ~= nil then
			self.birth_date = Date.jsonDecode(input.birth_date)
		end

		if input.birthDate ~= nil then
			self.birth_date = Date.jsonDecode(input.birthDate)
		end

		if input.update_time ~= nil then
			self.update_time = _google_protobuf_timestamp.Timestamp.jsonDecode(input.update_time)
		end

		if input.updateTime ~= nil then
			self.update_time = _google_protobuf_timestamp.Timestamp.jsonDecode(input.updateTime)
		end

		return self
	end,
}

Date = {
	new = function()
		return {
			year = 0,
			month = 0,
			day = 0,
		}
	end,

	encode = function(self: Date): buffer
		local output = buffer.create(0)
		local cursor = 0

		if self.year ~= 0 then
			output, cursor = proto.writeTag(output, cursor, 1, proto.wireTypes.varint)
			output, cursor = proto.writeVarInt(output, cursor, self.year)
		end

		if self.month ~= 0 then
			output, cursor = proto.writeTag(output, cursor, 2, proto.wireTypes.varint)
			output, cursor = proto.writeVarInt(output, cursor, self.month)
		end

		if self.day ~= 0 then
			output, cursor = proto.writeTag(output, cursor, 3, proto.wireTypes.varint)
			output, cursor = proto.writeVarInt(output, cursor, self.day)
		end

		local shrunkBuffer = buffer.create(cursor)
		buffer.copy(shrunkBuffer, 0, output, 0, cursor)
		return shrunkBuffer
	end,

	decode = function(input: buffer): Date
		local self = Date.new()
		local cursor = 0

		while cursor < buffer.len(input) do
			local field, wireType
			field, wireType, cursor = proto.readTag(input, cursor)

			if wireType == proto.wireTypes.varint then
				if field == 1 then
					local value
					value, cursor = proto.readVarInt(input, cursor)
					self.year = value
				elseif field == 2 then
					local value
					value, cursor = proto.readVarInt(input, cursor)
					self.month = value
				elseif field == 3 then
					local value
					value, cursor = proto.readVarInt(input, cursor)
					self.day = value
				end
			elseif wireType == proto.wireTypes.lengthDelimited then
				-- No fields
			elseif wireType == proto.wireTypes.i32 then
				-- No fields
			elseif wireType == proto.wireTypes.i64 then
				-- No fields
			else
				error("Unsupported wire type: " .. wireType)
			end
		end

		return self
	end,

	jsonEncode = function(self: Date): any
		local output: {
			year: number?,
			month: number?,
			day: number?,
		} = {}

		if self.year ~= 0 then
			output.year = self.year
		end

		if self.month ~= 0 then
			output.month = self.month
		end

		if self.day ~= 0 then
			output.day = self.day
		end

		return output
	end,

	jsonDecode = function(input: { [string]: any }): Date
		local self = Date.new()

		if input.year ~= nil then
			self.year = input.year
		end

		if input.month ~= nil then
			self.month = input.month
		end

		if input.day ~= nil then
			self.day = input.day
		end

		return self
	end,
}

return {
	Person = Person,
	Date = Date,
}
