syntax = "proto3";

package my.package;

import "include_me.proto";
import "same_package.proto";
import "deeper/include_me2.proto";

enum MyEnum {
	Zero = 0;
	One = 1;
	Two = 2;
}

// TODO: Preserve comments
message KitchenSink {
	int32 int32 = 1;
	optional int32 optionalInt32 = 2;

	oneof oneofValue {
		int32 x = 3;
		string y = 4;
	}

	MyEnum enum = 5;
	my.package2.MyEnum enum2 = 6;

	repeated int32 ints = 7 [packed = false];

	map<bool, string> map = 8;

	message NestedMessage {
		int32 x = 1;
	}
	NestedMessage nestedMessage = 9;

	my.package2.IncludedMessage includedMessage = 10;
	my.package2.IncludedMessage.SuperNestedMessage superNestedMessage = 11;

	enum NestedEnum {
		Zero = 0;
	}
	NestedEnum nestedEnum = 12;

	float float = 13;
	double double = 14;

	SamePackageNestedMessage samePackageNestedMessage = 15;
	my.package3.DeeperNestedMessage deeperNestedMessage = 16;

	repeated NestedMessage messages = 17;

	sint32 sint32 = 18;
	sint64 sint64 = 19;

	fixed32 fixed32 = 20;
	fixed64 fixed64 = 21;

	sfixed32 sfixed32 = 22;
	sfixed64 sfixed64 = 23;

	repeated float floats = 24;

	map<fixed32, fixed32> mapWithSetup = 25;
	map<int32, MyEnum> mapWithEnums = 26;

	AliasedEnum aliasedEnum = 27;

	int32 NotCamelCase = 28;

	repeated string strings = 29;
	repeated bool bools = 30;

	string customJson = 31 [json_name = "MyCustomJson"];

	bytes bytes = 32;
}

enum AliasedEnum {
	option allow_alias = true;
	AliasedEnum_Zero = 0;
	AliasedEnum_One = 1;
	AliasedEnum_Uno = 1;
	AliasedEnum_Yi = 1;
	AliasedEnum_Two = 2;
}

message MessageTwo {
	int32 int32 = 1;
}
