--!strict
--!nolint LocalUnused
--# selene: allow(empty_if, if_same_then_else, manual_table_clone, unused_variable)
-- This file was @autogenerated by protoc-gen-luau
local proto = require("../../proto")
local wktJson = require("../../proto/wktJson")

local Duration: proto.Message<Duration>
export type Duration = {
	seconds: number,
	nanos: number,
}

Duration = {
	new = function()
		return {
			seconds = 0,
			nanos = 0,
		}
	end,

	encode = function(self: Duration): buffer
		local output = buffer.create(0)
		local cursor = 0

		if self.seconds ~= 0 then
			output, cursor = proto.writeTag(output, cursor, 1, proto.wireTypes.varint)
			output, cursor = proto.writeVarInt(output, cursor, self.seconds)
		end

		if self.nanos ~= 0 then
			output, cursor = proto.writeTag(output, cursor, 2, proto.wireTypes.varint)
			output, cursor = proto.writeVarInt(output, cursor, self.nanos)
		end

		local shrunkBuffer = buffer.create(cursor)
		buffer.copy(shrunkBuffer, 0, output, 0, cursor)
		return shrunkBuffer
	end,

	decode = function(input: buffer): Duration
		local self = Duration.new()
		local cursor = 0

		while cursor < buffer.len(input) do
			local field, wireType
			field, wireType, cursor = proto.readTag(input, cursor)

			if wireType == proto.wireTypes.varint then
				if field == 1 then
					local value
					value, cursor = proto.readVarInt(input, cursor)
					self.seconds = value
				elseif field == 2 then
					local value
					value, cursor = proto.readVarInt(input, cursor)
					self.nanos = proto.limitInt32(value)
				end
			elseif wireType == proto.wireTypes.lengthDelimited then
				-- No fields
			elseif wireType == proto.wireTypes.i32 then
				-- No fields
			elseif wireType == proto.wireTypes.i64 then
				-- No fields
			else
				error("Unsupported wire type: " .. wireType)
			end
		end

		return self
	end,

	jsonEncode = function(self: Duration): any
		return wktJson.Duration.serialize(self :: any)
	end,

	jsonDecode = function(input: { [string]: any }): Duration
		return wktJson.Duration.deserialize(input :: any) -- any cast because we have a special jsonDecode
	end,
}

return {
	Duration = Duration,
}
