--!strict
--!nolint LocalUnused
--# selene: allow(empty_if, if_same_then_else, manual_table_clone, unused_variable)
-- This file was @autogenerated by protoc-gen-luau
local proto = require("../../proto")

type _FieldMaskImpl = {
	__index: _FieldMaskImpl,
	new: () -> FieldMask,
	encode: (self: FieldMask) -> buffer,
	decode: (input: buffer) -> FieldMask,
	jsonEncode: (self: FieldMask) -> { [string]: any },
	jsonDecode: (input: { [string]: any }) -> FieldMask,
	descriptor: proto.Descriptor,
}

type _FieldMaskFields = {
	paths: { string },
}

export type FieldMask = typeof(setmetatable({} :: _FieldMaskFields, {} :: _FieldMaskImpl))
local FieldMask: proto.Message<FieldMask>

local _FieldMaskImpl = {}
_FieldMaskImpl.__index = _FieldMaskImpl

function _FieldMaskImpl.new(data: _FieldMaskFields?): FieldMask
	return setmetatable({
		paths = if data == nil then {} else data.paths,
	}, _FieldMaskImpl)
end

function _FieldMaskImpl.encode(self: FieldMask): buffer
	local output = buffer.create(0)
	local cursor = 0

	if self.paths and #self.paths > 0 then
		for _, value: string in self.paths do
			output, cursor = proto.writeTag(output, cursor, 1, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeString(output, cursor, value)
		end
	end

	local shrunkBuffer = buffer.create(cursor)
	buffer.copy(shrunkBuffer, 0, output, 0, cursor)
	return shrunkBuffer
end

function _FieldMaskImpl.decode(input: buffer): FieldMask
	local self = _FieldMaskImpl.new()
	local cursor = 0

	while cursor < buffer.len(input) do
		local field, wireType
		field, wireType, cursor = proto.readTag(input, cursor)

		if wireType == proto.wireTypes.varint then
			-- No fields
		elseif wireType == proto.wireTypes.lengthDelimited then
			if field == 1 then
				local value
				value, cursor = proto.readBuffer(input, cursor)
				table.insert(self.paths, buffer.tostring(value))
			end
		elseif wireType == proto.wireTypes.i32 then
			-- No fields
		elseif wireType == proto.wireTypes.i64 then
			-- No fields
		else
			error("Unsupported wire type: " .. wireType)
		end
	end

	return self
end

function _FieldMaskImpl.jsonEncode(self: FieldMask): any
	local output: {
		paths: { string }?,
	} = {}

	if self.paths and #self.paths > 0 then
		local newOutput: { string } = {}
		for _, value: string in self.paths do
			table.insert(newOutput, value)
		end
		output.paths = newOutput
	end

	return output
end

function _FieldMaskImpl.jsonDecode(input: { [string]: any }): FieldMask
	local self = FieldMask.new()

	if input.paths ~= nil then
		local newOutput: { string } = {}
		for _, value in input.paths do
			table.insert(newOutput, value)
		end

		self.paths = newOutput
	end

	return self
end

_FieldMaskImpl.descriptor = {
	name = "FieldMask",
	fullName = "google.protobuf.FieldMask",
}

FieldMask = _FieldMaskImpl

return {
	FieldMask = FieldMask,
}
