--!strict
--!nolint LocalUnused
--# selene: allow(empty_if, if_same_then_else, manual_table_clone, unused_variable)
-- This file was @autogenerated by protoc-gen-luau
local proto = require("../../proto")

local Any: proto.Message<Any>
export type Any = {
	type_url: string,
	value: buffer,
}

Any = {
	new = function()
		return {
			type_url = "",
			value = buffer.create(0),
		}
	end,

	encode = function(self: Any): buffer
		local output = buffer.create(0)
		local cursor = 0

		if self.type_url ~= "" then
			output, cursor = proto.writeTag(output, cursor, 1, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeString(output, cursor, self.type_url)
		end

		if buffer.len(self.value) > 0 then
			output, cursor = proto.writeTag(output, cursor, 2, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeBuffer(output, cursor, self.value, buffer.len(self.value))
		end

		local shrunkBuffer = buffer.create(cursor)
		buffer.copy(shrunkBuffer, 0, output, 0, cursor)
		return shrunkBuffer
	end,

	decode = function(input: buffer): Any
		local self = Any.new()
		local cursor = 0

		while cursor < buffer.len(input) do
			local field, wireType
			field, wireType, cursor = proto.readTag(input, cursor)

			if wireType == proto.wireTypes.varint then
				-- No fields
			elseif wireType == proto.wireTypes.lengthDelimited then
				if field == 1 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.type_url = buffer.tostring(value)
				elseif field == 2 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.value = value
				end
			elseif wireType == proto.wireTypes.i32 then
				-- No fields
			elseif wireType == proto.wireTypes.i64 then
				-- No fields
			else
				error("Unsupported wire type: " .. wireType)
			end
		end

		return self
	end,

	jsonEncode = function(self: Any): any
		local output: {
			typeUrl: string?,
			value: buffer?,
		} = {}

		if self.type_url ~= "" then
			output.typeUrl = self.type_url
		end

		if buffer.len(self.value) > 0 then
			output.value = proto.json.serializeBuffer(self.value)
		end

		return output
	end,

	jsonDecode = function(input: { [string]: any }): Any
		local self = Any.new()

		if input.type_url ~= nil then
			self.type_url = input.type_url
		end

		if input.typeUrl ~= nil then
			self.type_url = input.typeUrl
		end

		if input.value ~= nil then
			self.value = proto.json.deserializeBuffer(input.value)
		end

		return self
	end,
}

return {
	Any = Any,
}
